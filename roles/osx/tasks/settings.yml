# TODO: This assumes we are only using a MacBook Pro 13" ProMotion screen
# - name: "Set preferred resolution" 
#   shell: "displayplacer 'res:1800x1169 hz:120 color_depth:8 enabled:true scaling:on origin:(0,0) degree:0'"
#   changed_when: false

- name: Check current displaysleep values for both Battery and AC power
  shell: |
    pmset -g custom | awk '/Battery Power/,/AC Power/ {if ($1 == "displaysleep") print $2}' | head -n 1
    pmset -g custom | awk '/Battery Power/,/AC Power/ {if ($1 == "sleep") print $2}' | head -n 1
    pmset -g custom | awk '/AC Power/,0 {if ($1 == "displaysleep") print $2}' | head -n 1
    pmset -g custom | awk '/AC Power/,0 {if ($1 == "sleep") print $2}' | head -n 1
  register: displaysleep_values
  changed_when: false  # No change, as this is only gathering information

# - name: Debug displaysleep values
#   debug:
#     msg: "value: {{ displaysleep_values.stdout }}"

- name: Parse displaysleep values
  set_fact:
    battery_displaysleep: "{{ displaysleep_values.stdout_lines[0] }}"
    battery_sleep: "{{ displaysleep_values.stdout_lines[1] }}"
    ac_displaysleep: "{{ displaysleep_values.stdout_lines[2] }}"
    ac_sleep: "{{ displaysleep_values.stdout_lines[3] }}"

- name: "Prepare privilege escalation"
  shell: "cliclick w:3000 c:760,415 w:200 c:750,430 w:200 t:{{ ansible_become_password }} w:200 c:815,475 w:500 &"
  when: 
    - battery_displaysleep != "5" or battery_sleep != "5" or ac_displaysleep != "10" or ac_sleep != "0"

- name: "Set preferred power settings when on battery"
  shell: "pmset -b displaysleep 5 sleep 5"
  become: true
  when: 
    - battery_displaysleep != "5" or battery_sleep != "5"

- name: "Set preferred power settings when connected"
  shell: "pmset -c displaysleep 10 sleep 0"
  become: true
  when: 
    - ac_displaysleep != "10" or ac_sleep != "0"

- include_tasks: defaults.yml
  vars: 
    domain: "{{ domain_item.key }}"
    keys: "{{ domain_item.value }}"
  loop: >
    {{ defaults.ui 
    | combine(defaults.devices, recursive=true) 
    | combine(defaults.finder, recursive=true) 
    | combine(defaults.dock, recursive=true) 
    | combine(defaults.safari, recursive=true) 
    | combine(defaults.timemachine, recursive=true)
    | combine(defaults.sysapps, recursive=true)
    | combine(defaults.userapps, recursive=true)
    | dict2items }}
  loop_control:
    label: ""
    loop_var: domain_item
  tags: 
    - defaults
    - priority

- import_tasks: per_app/finder.yml
  tags: 
    - finder

- name: "Restart affected services"
  shell: "killall cfprefsd Dock Finder SystemUIServer TouchBarServer Divvy"
  become: true
  tags: 
    - restart

- name: "Link iCloud Drive to home dir for easier CLI access"
  file: 
    src: "~/Library/Mobile\ Documents/com~apple~CloudDocs/"
    dest: "~/iCloud"
    state: link
  tags: 
    - icloud
    - priority

- import_tasks: per_app/code.yml
  tags:
    - priority
    - code

- import_tasks: per_app/tower.yml
  tags:
    - priority
    - tower

- import_tasks: per_app/raycast.yml
  tags: 
    - raycast

- import_tasks: per_app/divvy.yml
  tags:
    - divvy
    
- import_tasks: per_app/contexts.yml
  tags: 
    - contexts

- import_tasks: per_app/iterm.yml
  tags: 
    - iterm
    
# - import_tasks: per_app/appstore.yml
#   tags:
#     - appstore
